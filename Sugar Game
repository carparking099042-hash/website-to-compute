gameid-shop/
├─ backend/
│  ├─ package.json
│  ├─ server.js
│  ├─ db.js
│  ├─ seed.js
│  ├─ .env
│  ├─ controllers/
│  │  ├─ authController.js
│  │  ├─ userController.js
│  │  ├─ productController.js
│  │  ├─ purchaseController.js
│  │  └─ paymentController.js
│  ├─ middlewares/
│  │  ├─ auth.js
│  │  └─ admin.js
│  └─ models/
│     └─ (using raw SQL via db.js)

├─ frontend/
│  ├─ package.json
│  ├─ postcss.config.js
│  ├─ tailwind.config.js
│  ├─ src/
│  │  ├─ main.jsx
│  │  ├─ App.jsx
│  │  ├─ api.js
│  │  ├─ pages/
│  │  │  ├─ Home.jsx
│  │  │  ├─ Product.jsx
│  │  │  ├─ Login.jsx
│  │  │  ├─ Register.jsx
│  │  │  ├─ Dashboard.jsx
│  │  │  └─ AdminPanel.jsx
│  │  └─ components/
│  │     ├─ NavBar.jsx
│  │     ├─ ProductCard.jsx
│  │     └─ CreditTopupModal.jsx
│  └─ public/
│     └─ index.html

└─ README.md
{
  "name": "gameid-shop-backend",
  "version": "1.0.0",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "seed": "node seed.js"
  },
  "dependencies": {
    "bcrypt": "^5.1.0",
    "body-parser": "^1.20.2",
    "cors": "^2.8.5",
    "dotenv": "^16.1.4",
    "express": "^4.18.2",
    "jsonwebtoken": "^9.0.0",
    "sqlite3": "^5.1.6"
  }
}
const sqlite3 = require('sqlite3').verbose();
const path = require('path');
const dbPath = path.join(__dirname, 'database.sqlite');
const db = new sqlite3.Database(dbPath);

module.exports = db;
require('dotenv').config();
const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const db = require('./db');
const authRouter = require('./controllers/authController');
const userRouter = require('./controllers/userController');
const productRouter = require('./controllers/productController');
const purchaseRouter = require('./controllers/purchaseController');
const paymentRouter = require('./controllers/paymentController');

const app = express();
app.use(cors());
app.use(bodyParser.json());

// Simple table init (if not exists)
const initSql = `
PRAGMA foreign_keys = ON;
CREATE TABLE IF NOT EXISTS users (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  username TEXT UNIQUE,
  password TEXT,
  role TEXT DEFAULT 'user',
  credit INTEGER DEFAULT 0
);
CREATE TABLE IF NOT EXISTS products (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  title TEXT,
  game TEXT,
  price INTEGER,
  img TEXT,
  details TEXT,
  secret_info TEXT,
  available INTEGER DEFAULT 1
);
CREATE TABLE IF NOT EXISTS purchases (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  user_id INTEGER,
  product_id INTEGER,
  price INTEGER,
  created_at TEXT DEFAULT (datetime('now')),
  delivered INTEGER DEFAULT 0,
  FOREIGN KEY(user_id) REFERENCES users(id),
  FOREIGN KEY(product_id) REFERENCES products(id)
);
CREATE TABLE IF NOT EXISTS topups (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  user_id INTEGER,
  amount INTEGER,
  method TEXT,
  status TEXT DEFAULT 'pending',
  created_at TEXT DEFAULT (datetime('now')),
  FOREIGN KEY(user_id) REFERENCES users(id)
);
`;

db.exec(initSql, (err) => {
  if (err) console.error('Init DB err', err);
  else console.log('DB initialized');
});

// routers
app.use('/api/auth', authRouter);
app.use('/api/users', userRouter);
app.use('/api/products', productRouter);
app.use('/api/purchases', purchaseRouter);
app.use('/api/payments', paymentRouter);

const PORT = process.env.PORT || 4000;
app.listen(PORT, () => console.log('Backend running on', PORT));
const express = require('express');
const router = express.Router();
const db = require('../db');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');

const JWT_SECRET = process.env.JWT_SECRET || 'secret_dev';

router.post('/register', async (req, res) => {
  const { username, password } = req.body;
  if (!username || !password) return res.status(400).json({ message: 'missing' });
  const hash = await bcrypt.hash(password, 10);
  db.run('INSERT INTO users(username,password) VALUES(?,?)', [username, hash], function(err) {
    if (err) return res.status(400).json({ message: 'username exists' });
    const user = { id: this.lastID, username, role: 'user' };
    const token = jwt.sign(user, JWT_SECRET);
    res.json({ token, user });
  });
});

router.post('/login', (req, res) => {
  const { username, password } = req.body;
  db.get('SELECT * FROM users WHERE username = ?', [username], async (err, row) => {
    if (err || !row) return res.status(400).json({ message: 'invalid' });
    const ok = await bcrypt.compare(password, row.password);
    if (!ok) return res.status(400).json({ message: 'invalid' });
    const user = { id: row.id, username: row.username, role: row.role, credit: row.credit };
    const token = jwt.sign(user, JWT_SECRET);
    res.json({ token, user });
  });
});

module.exports = router;
const jwt = require('jsonwebtoken');
const JWT_SECRET = process.env.JWT_SECRET || 'secret_dev';
module.exports = function(req,res,next){
  const header = req.headers.authorization;
  if (!header) return res.status(401).json({message:'no token'});
  const token = header.split(' ')[1];
  try{
    const user = jwt.verify(token, JWT_SECRET);
    req.user = user;
    next();
  }catch(e){
    res.status(401).json({message:'invalid token'});
  }
}
module.exports = function(req,res,next){
  if (req.user && req.user.role === 'admin') return next();
  return res.status(403).json({message:'admin only'});
}
const express = require('express');
const router = express.Router();
const db = require('../db');
const auth = require('../middlewares/auth');
const adminOnly = require('../middlewares/admin');

// list
router.get('/', (req,res)=>{
  db.all('SELECT id,title,game,price,img,details,available FROM products WHERE available=1',[],(err,rows)=>{
    if(err) return res.status(500).json({err});
    res.json(rows);
  })
});

// admin add
router.post('/', auth, adminOnly, (req,res)=>{
  const {title,game,price,img,details,secret_info} = req.body;
  db.run('INSERT INTO products(title,game,price,img,details,secret_info) VALUES(?,?,?,?,?,?)', [title,game,price,img,details,secret_info], function(err){
    if(err) return res.status(500).json({err});
    res.json({id:this.lastID});
  })
});

// admin edit
router.put('/:id', auth, adminOnly, (req,res)=>{
  const id = req.params.id; const {title,game,price,img,details,available,secret_info} = req.body;
  db.run('UPDATE products SET title=?,game=?,price=?,img=?,details=?,available=?,secret_info=? WHERE id=?', [title,game,price,img,details,available,secret_info,id], function(err){
    if(err) return res.status(500).json({err});
    res.json({changed:this.changes});
  })
});

// admin delete
router.delete('/:id', auth, adminOnly, (req,res)=>{
  db.run('DELETE FROM products WHERE id=?', [req.params.id], function(err){
    if(err) return res.status(500).json({err});
    res.json({deleted:this.changes});
  })
});

// get product secret (only after purchase or admin)
router.get('/:id/secret', auth, (req,res)=>{
  const id = req.params.id; const userId = req.user.id; const role = req.user.role;
  if(role==='admin'){
    db.get('SELECT secret_info FROM products WHERE id=?', [id], (err,row)=>{ if(err) return res.status(500).json({err}); res.json({secret: row ? row.secret_info : null}); })
  } else {
    // check purchase
    db.get('SELECT * FROM purchases WHERE user_id=? AND product_id=?', [userId,id], (err,row)=>{
      if(err) return res.status(500).json({err});
      if(!row) return res.status(403).json({message:'not purchased'});
      db.get('SELECT secret_info FROM products WHERE id=?',[id],(err2,row2)=>{ if(err2) return res.status(500).json({err2}); res.json({secret: row2 ? row2.secret_info : null}); })
    })
  }
});

module.exports = router;
const express = require('express');
const router = express.Router();
const db = require('../db');
const auth = require('../middlewares/auth');

// buy product (deduct credit)
router.post('/buy', auth, (req,res)=>{
  const userId = req.user.id; const {productId} = req.body;
  db.get('SELECT * FROM products WHERE id=? AND available=1', [productId], (err,product)=>{
    if(err || !product) return res.status(400).json({message:'product not found'});
    db.get('SELECT credit FROM users WHERE id=?', [userId], (err2,user)=>{
      if(err2) return res.status(500).json({err2});
      if(user.credit < product.price) return res.status(400).json({message:'insufficient credit'});
      // deduct
      db.run('UPDATE users SET credit = credit - ? WHERE id=?', [product.price,userId], function(err3){
        if(err3) return res.status(500).json({err3});
        // create purchase
        db.run('INSERT INTO purchases(user_id,product_id,price,delivered) VALUES(?,?,?,1)', [userId,productId,product.price], function(err4){
          if(err4) return res.status(500).json({err4});
          // return secret info directly
          res.json({purchaseId:this.lastID, secret: product.secret_info});
        })
      })
    })
  })
});

// list purchases for user
router.get('/', auth, (req,res)=>{
  const user = req.user;
  if(user.role==='admin'){
    db.all('SELECT p.*, u.username, pr.title FROM purchases p JOIN users u ON p.user_id=u.id JOIN products pr ON p.product_id=pr.id ORDER BY p.created_at DESC', [], (err,rows)=>{ if(err) return res.status(500).json({err}); res.json(rows); })
  } else {
    db.all('SELECT p.*, pr.title FROM purchases p JOIN products pr ON p.product_id=pr.id WHERE p.user_id=? ORDER BY p.created_at DESC', [user.id], (err,rows)=>{ if(err) return res.status(500).json({err}); res.json(rows); })
  }
});

module.exports = router;
const express = require('express');
const router = express.Router();
const db = require('../db');
const auth = require('../middlewares/auth');

// create topup record (mock: user chooses amount and method)
router.post('/topup', auth, (req,res)=>{
  const {amount, method} = req.body; const userId = req.user.id;
  db.run('INSERT INTO topups(user_id,amount,method,status) VALUES(?,?,?,?)', [userId,amount,method,'completed'], function(err){
    if(err) return res.status(500).json({err});
    // immediately credit (mock payment instantly completed)
    db.run('UPDATE users SET credit = credit + ? WHERE id=?', [amount, userId], function(err2){
      if(err2) return res.status(500).json({err2});
      res.json({topupId: this.lastID, credited: amount});
    })
  })
});

// admin can view topups
router.get('/topups', auth, (req,res)=>{
  if(req.user.role!=='admin') return res.status(403).json({message:'admin only'});
  db.all('SELECT t.*, u.username FROM topups t JOIN users u ON t.user_id=u.id ORDER BY t.created_at DESC', [], (err,rows)=>{ if(err) return res.status(500).json({err}); res.json(rows); })
});

module.exports = router;
const express = require('express');
const router = express.Router();
const db = require('../db');
const auth = require('../middlewares/auth');
const adminOnly = require('../middlewares/admin');

// get current user
router.get('/me', auth, (req,res)=>{
  db.get('SELECT id,username,role,credit FROM users WHERE id=?',[req.user.id],(err,row)=>{ if(err) return res.status(500).json({err}); res.json(row); })
});

// admin: list users
router.get('/', auth, adminOnly, (req,res)=>{
  db.all('SELECT id,username,role,credit FROM users', [], (err,rows)=>{ if(err) return res.status(500).json({err}); res.json(rows); })
});

// admin: change credit
router.post('/:id/credit', auth, adminOnly, (req,res)=>{
  const id = req.params.id; const {amount} = req.body; // amount can be negative
  db.run('UPDATE users SET credit = credit + ? WHERE id=?', [amount,id], function(err){ if(err) return res.status(500).json({err}); res.json({changed:this.changes}); })
});

module.exports = router;
const db = require('./db');
const bcrypt = require('bcrypt');
(async()=>{
  const adminPass = await bcrypt.hash('admin123',10);
  db.run('INSERT OR IGNORE INTO users(username,password,role,credit) VALUES(?,?,?,?)', ['admin', adminPass, 'admin', 1000]);
  db.run('INSERT OR IGNORE INTO users(username,password,role,credit) VALUES(?,?,?,?)', ['user1', await bcrypt.hash('user123',10), 'user', 200]);

  const seedProducts = [
    ['Cool Valorant ID','Valorant',150,['https://placehold.co/300x180?text=valorant'].join(','),'Account with skins A','login: userA / pass: pA'],
    ['Legends Apex ID','Apex Legends',200,['https://placehold.co/300x180?text=apex'].join(','),'High rank','login: userB / pass: pB'],
    ['Mobile Legends ID','Mobile Legends',100,['https://placehold.co/300x180?text=ml'].join(','),'Lots of skins','login: userC / pass: pC'],
    ['PUBG ID','PUBG',120,['https://placehold.co/300x180?text=pubg'].join(','),'Season pass','login: userD / pass: pD'],
    ['Special Fortnite ID','Fortnite',180,['https://placehold.co/300x180?text=fortnite'].join(','),'Rare skin','login: userE / pass: pE']
  ];

  seedProducts.forEach(p=>{
    db.run('INSERT OR IGNORE INTO products(title,game,price,img,details,secret_info) VALUES(?,?,?,?,?,?)', p);
  });

  console.log('Seed done');
  process.exit(0);
})();
{
  "name": "gameid-shop-frontend",
  "version": "1.0.0",
  "private": true,
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.14.1",
    "axios": "^1.4.0"
  },
  "scripts": {
    "start": "vite",
    "build": "vite build"
  },
  "devDependencies": {
    "vite": "^5.0.0",
    "tailwindcss": "^4.0.0",
    "postcss": "^8.0.0",
    "autoprefixer": "^10.0.0"
  }
}
module.exports = {
  content: ['./index.html','./src/**/*.{js,jsx}'],
  theme: { extend: {} },
  plugins: [],
}
import axios from 'axios';
const api = axios.create({ baseURL: process.env.VITE_API_URL || 'http://localhost:4000/api' });

api.interceptors.request.use(cfg => {
  const token = localStorage.getItem('token');
  if(token) cfg.headers.Authorization = 'Bearer ' + token;
  return cfg;
});
export default api;
import React from 'react'
import { createRoot } from 'react-dom/client'
import { BrowserRouter, Routes, Route } from 'react-router-dom'
import App from './App'
import './index.css'

createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <BrowserRouter>
      <App />
    </BrowserRouter>
  </React.StrictMode>
)
import React from 'react';
import { Routes, Route } from 'react-router-dom';
import Home from './pages/Home';
import Login from './pages/Login';
import Register from './pages/Register';
import Dashboard from './pages/Dashboard';
import AdminPanel from './pages/AdminPanel';
import NavBar from './components/NavBar';

export default function App(){
  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 to-indigo-900 text-white">
      <NavBar />
      <div className="p-4 max-w-6xl mx-auto">
        <Routes>
          <Route path="/" element={<Home/>} />
          <Route path="/login" element={<Login/>} />
          <Route path="/register" element={<Register/>} />
          <Route path="/dashboard" element={<Dashboard/>} />
          <Route path="/admin" element={<AdminPanel/>} />
        </Routes>
      </div>
    </div>
  );
}
import React from 'react';
import api from '../api';

export default function ProductCard({product}){
  const buy = async ()=>{
    try{
      const res = await api.post('/purchases/buy',{productId: product.id});
      alert('ซื้อสำเร็จ! ข้อมูลไอดี:\n' + res.data.secret);
    }catch(e){
      alert(e.response?.data?.message || 'ซื้อไม่สำเร็จ');
    }
  }
  return (
    <div className="bg-gradient-to-br from-indigo-700 to-pink-600 rounded-2xl p-4 shadow-lg">
      <img src={product.img} alt={product.title} className="w-full h-40 object-cover rounded-lg mb-3" />
      <h3 className="font-bold text-xl">{product.title}</h3>
      <p className="text-sm opacity-80">{product.game}</p>
      <p className="mt-2">{product.details}</p>
      <div className="mt-3 flex items-center justify-between">
        <div className="text-2xl font-bold">฿{product.price}</div>
        <button onClick={buy} className="px-3 py-2 bg-yellow-400 text-black rounded-md font-semibold">ซื้อทันที</button>
      </div>
    </div>
  )
}
